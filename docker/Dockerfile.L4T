# Copyright (c) 2024, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM nvcr.io/nvidia/l4t-base:r35.2.1
SHELL ["/bin/bash", "-c"]
ARG MLCOMMONS_DIR=/opt/mlcommons
ARG MLPERF_INFERENCE_DIR=${MLCOMMONS_DIR}/inference
ARG MLPERF_INFERENCE_HASH=7040f250887105c59f54829b69572bb7313d0b80
ARG LOADGEN_DIR=${MLPERF_INFERENCE_DIR}/loadgen
ARG LOADGEN_BUILD_DIR=${LOADGEN_DIR}/build
ARG LOADGEN_BUILD_TYPE=Release

ARG MITTEN_INSTALL_DIR=/opt/mitten

ENV TZ=US/Pacific

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
RUN rm -rf /var/lib/apt/lists/* && rm -rf /etc/apt/sources.list.d/cuda.list \
 && apt update \
 && apt install -y --no-install-recommends build-essential autoconf \
        libtool git ccache curl wget pkg-config sudo ca-certificates \
        automake libssl-dev bc python3-dev python3-pip google-perftools \
        gdb libglib2.0-dev clang sshfs libre2-dev libboost-dev \
        sysstat sshpass ntpdate less iputils-ping \
 && apt -y autoremove \
 && apt remove -y cmake \
 && apt install -y --no-install-recommends pkg-config zip g++ zlib1g-dev \
        unzip libarchive-dev
RUN python3 -m pip install -U pip setuptools wheel

WORKDIR /tmp

# Install CMake
RUN wget https://github.com/Kitware/CMake/releases/download/v3.25.0/cmake-3.25.0.tar.gz \
 && tar -zxvf cmake-3.25.0.tar.gz \
 && cd cmake-3.25.0 \
 && ./bootstrap \
 && make \
 && make install

# Install gflags && glog
RUN apt install -y libgoogle-glog-dev libgflags-dev

# Install loadgen from MLCommons
RUN mkdir -p ${MLCOMMONS_DIR} \
 && git clone https://github.com/mlcommons/inference.git ${MLPERF_INFERENCE_DIR} \
 && cd ${MLPERF_INFERENCE_DIR} \
 && git fetch \
 && git checkout ${MLPERF_INFERENCE_HASH} \
 && git submodule update --init tools/submission/power-dev \
 && git submodule update --init third_party/pybind \
 && git submodule update --init language/bert/DeepLearningExamples \
 && git submodule update --init vision/medical_imaging/3d-unet-brats19/nnUnet
RUN mkdir -p ${LOADGEN_BUILD_DIR} \
 && cd ${LOADGEN_BUILD_DIR} \
 && cmake -DCMAKE_BUILD_TYPE=${LOADGEN_BUILD_TYPE} .. \
 && make -j

# Setup environment variables for pycuda
ENV CUDA_ROOT=/usr/local/cuda
ENV CUDA_INC_DIR=${CUDA_ROOT}/include
ENV PATH=${CUDA_ROOT}/bin:/usr/bin:${PATH}
ENV CPATH=${CUDA_ROOT}/include:${CPATH}
ENV LIBRARY_PATH=${CUDA_ROOT}/lib64:${LIBRARY_PATH}
ENV LD_LIBRARY_PATH=${CUDA_ROOT}/lib64:${LD_LIBRARY_PATH}

RUN apt install python3.8-venv

COPY . ${MITTEN_INSTALL_DIR}
WORKDIR ${MITTEN_INSTALL_DIR}

# RUN make install_deps
# RUN make build && make install


# With latest Ubuntu:20.04 container, there will be no 'python' or 'pip' even if we have installed 'python3' and
# 'python3-pip'. So add softlink to avoid wheel installation failure.
RUN ln -sf /usr/bin/python3 /usr/bin/python
RUN ln -sf /usr/bin/pip3 /usr/bin/pip
